ToDo.
x	add 33ohm resistors to USB
	Finish audio testing
	Test vreg/powering from battery
x	test serial output - 0 ohm next to lipo charger

x	New module enclosure
	New motor/speaker enclosures

	Switch to internal voltage regulator? 120mA? Teensy 3.1 uses it!!!! FFFUUUU
	Delete R10 - the lipo charger passes through Vin - 0.7V


	Refactor main code
	Trigger extra motors

	Battery life function
	Shutdown function

	Audio
x		Access flash memory
x		How to program the flash memory in factory
x		Run RawHardwareTest and debug until it passes (inside SerialFlash lib examples)

		Volume Control
x			Detect/debounce buttons (Just use regular bounce library)
x			Ability to control digipot (added tested working code 9.5)
x			Linearize sound pressure in software as needed (now done in HW - 2nd red pcb rev)
			Adjust volume through digipot

		Amp Hardware
			Wire two speakers in series (8ohm) and confirm impedance
			Test DAC output (sine wave with dc offset)
			Test DAC signal after DC blocking cap (0V center)
			Test DAC signal while adjusting digitpot (shifting magnitude, 0V center)
				Check if feedback should go from in+ to out-
				Check if one audio channel is at 0V
			Plug in speakers and test audio
				Store a test file in spi flash
				Output into speakers
				Change volume
			Draw finalize schematics
			Update dev notes about audio schematic


		Sound files
			"Welcome to Swing Forge. Preparing system."
			"Your vest calibration is complete."
			Chime at the back swing limit
			Beep for the volume noise
			Chime2 at end of swing - cycle through phrases? have a "great job" for swings with a low number of errors?
			Low battery
			Shutting down

		Implement in primary code
			On wakeup
			On complete calibration
			On back swing complete
			On full swing complete
			Low battery
			Shutting down

			Changing volume up/down
			Tune volume up/down speed


	Test iOS
		See what the data from the app looks like
		learn how to program the ble module
		Pass data through BLE to Teensy
		Teensy detects new profile and goes into uploading mode
			Blinking blue LED
		Sets parameters
		"Settings updated" Audio


	Double tap on accelerometer to start the swing
x		Update to latest dev library
x			Move fixed Euler angle function
x			Add other added functions (normalize?)
x		Port MotionDriver 6.12 Library
x		Implement fixed Euler angle function
x		Implement tap detection
x		Tune tap thresholds and timing
		Implement calibration code in new library


	Turn off BLE to save power?
	Turn off audio amp to save power
	Fix schematic note about Vreg - if I actually use it. drop out is <0.11 V for 



	UI!

	Fabric button for the power switch
	The button responds by vibrating gently, like a cat’s purr when he is awakened.
	The vibration comes in two short spurts, indicating the vest is ready and awake.
	Intro message
	As soon as the intro message is complete, all the vibration motors in the vest vibrate in a “vibration symphony” to create the sensation that the body has been scanned.
	Once calibration is complete, the vest stops vibrating and tells the user: “Your vest calibration is complete”.

	Double tap to start swing, vibration/chime to signal starting swing, position feedback starts right away. Chime at full backswing
	Single tap to exit swing
	Solid green LED while running
	Blinking blue LED while data upload
	Orange breathing LED while idle
	Red flash in between breaths for low battery



Down the line:
	MPU calibration values get stored in eeprom, and then read from eeprom at boot and sent to IMU (or just make IMU save them?)
	make all of the data types in the new imu library consistent
	Save volume level to spi flash, read at boot
	Switch to either MAX98304 (analog in, $0.49) or MAX98357A (I2S in, $1.00)